import axios from 'axios';
import Cve from '../models/cve.model.js';


const getCvesFromApi = async (req, res) => {
    try {
        const { resultsPerPage = 10, startIndex = 0 } = req.query;
        const response = await axios.get('https://services.nvd.nist.gov/rest/json/cves/2.0', {
            params: {
                resultsPerPage,
                startIndex
            }
        });
        res.json(response.data);
    } catch (error) {
        console.log(error);
        res.status(500).json({ message: 'Error fetching CVEs from API', error });
    }
};



const retrieveCve = async (req, res) => {
    try {
        const { cveId = req.params.id } = req.query;
        //const { cveId } = req.query;
        console.log('CVE ID_26:', cveId);
        //console.log('CVE ID_28:', req);
        const response = await axios.get('https://services.nvd.nist.gov/rest/json/cves/2.0', {
            params: { cveId }
        });

        console.log('CVE RESPONSE_33:', response);
        const cveData = response.data.vulnerabilities[0].cve;
        console.log('CVE DATA_32:', cveData);

        const cveDocument = {
            _externalId: cveData.id,
            cveId: cveData.id || `placeholder-${new Date().getTime()}`, // Fallback ID if cveId is null
            severity: cveData.metrics.cvssMetricV31?.[0]?.cvssData?.baseSeverity || 'UNKNOWN',
            description: cveData.descriptions?.[0]?.value || 'No description provided',
            publishedDate: cveData.published,
            lastModifiedDate: cveData.lastModified,
            references: cveData.references?.map(ref => ref.url) || [],
            impact: {
                baseMetricV2: {
                    severity: cveData.metrics.cvssMetricV2?.[0]?.cvssData?.baseSeverity || 'UNKNOWN',
                    impactScore: cveData.metrics.cvssMetricV2?.[0]?.impactScore || 0,
                    exploitabilityScore: cveData.metrics.cvssMetricV2?.[0]?.exploitabilityScore || 0,
                },
            },
        };

        console.log('CVE DATA_51:', cveData.id);
        //console.log('CVE DOC _52:', cveDocument);
        
        const newCve = new Cve(cveDocument);
        const existingCve = await Cve.findOne({ cveId: newCve.cveId });
        if (!existingCve) {
            await newCve.save();
            //await newCve.create();
            //await Cve.create(newCve);
        }
            
        
        //Guardar documento en mi base de datos
        //const newCve = new Cve(cveDocument);
        //await newCve.save();
        res.json({ message: 'CVE saved to database', cve: newCve });

    } catch (error) {
        if (error.code === 11000) {
            // Manejo de error de duplicación de clave única o error E11000 
            console.log('Error E11000: Duplicación de clave única', error.keyValue);
            res.status(400).json({
                message: 'CVE already exists in the database',
                keyValue: error.keyValue
            });
        } else {
            console.log(error);
            res.status(500).json({ message: 'Error fetching CVEs from API or saving to database', error });
        }
    }
};



const getCveById = async (req, res) => {
    try {
        const cve = await Cve.findOne({ _id: req.params.id });
        res.json(cve);
        console.log(req.params.id)
    } catch (error) {
        console.log(error);
        res.status(400).json("Error: " + error);
    }
};




/*const getCvesById = async (req, res) => {
    try {
        const { id } = req.params;
        const cve = await Cve.findOne({ cveId: id });
        if (!cve) {
            return res.status(404).json({ message: 'CVE not found' });
        }
        res.json(cve);
    } catch (error) {
        res.status(500).json({ message: 'Error fetching CVE', error });
    }
};
*/

const createCve = async (req, res) => {
    try {
        const cveData = req.body;
        const cve = new Cve(cveData);
        await cve.save();
        res.status(201).json(cve);
    } catch (error) {
        res.status(500).json({ message: 'Error creating CVE', error });
    }
};

const getCvesFromDb = async (req, res) => {
    try {
        const cves = await Cve.find();
        res.json(cves);
    } catch (error) {
        res.status(500).json({ message: 'Error fetching CVEs from database', error });
    }
};


const updateCve = async (req, res) => {
    try {
        const { id } = req.params;
        const updatedCve = await Cve.findByIdAndUpdate(id, req.body, { new: true });
        res.json(updatedCve);
    } catch (error) {
        res.status(500).json({ message: 'Error updating CVE', error });
    }
};


const deleteCve = async (req, res) => {
    try {
        const { id } = req.params;
        await Cve.findByIdAndDelete(id);
        res.json({ message: 'CVE deleted successfully' });
    } catch (error) {
        res.status(500).json({ message: 'Error deleting CVE', error });
    }
};


export {
    getCvesFromApi,
    getCveById,
    retrieveCve,
    createCve,
    getCvesFromDb,
    updateCve,
    deleteCve
};